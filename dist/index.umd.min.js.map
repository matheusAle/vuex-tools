{"version":3,"file":"index.umd.min.js","sources":["../src/createModule.ts","../src/createStore.ts"],"sourcesContent":["import type { ActionContext, Getter } from 'vuex';\nimport type { ModuleBuilder, Mutation, ActionHandler } from './types';\n\nconst actionCreator = <P>(\n  moduleName: () => string | undefined,\n  type: string,\n) => (payload: P) => ({\n  type: moduleName() ? `${moduleName()}/${type}` : type,\n  payload,\n});\n\nfunction overrideActionContext<State, RootState>(\n  store: ActionContext<State, RootState>,\n): ActionContext<State, RootState> {\n  return {\n    ...store,\n    commit: (type) => store.commit(type, { root: true }),\n  };\n}\n\n/**\n * Create and {@see ModuleBuilder} instance.\n *\n * ```ts\n * import { createModule } from 'vuex-tools';\n *\n * const module = createModule('counter', { count: 1 });\n * ```\n *\n * @param initialState\n */\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport function createModule<State, RootState = any>(\n  initialState: State,\n): ModuleBuilder<State, RootState> {\n  const mutations: Mutation<State, unknown>[] = [];\n  const actions: ActionHandler<State, RootState, unknown>[] = [];\n  const getters: Getter<State, RootState>[] = [];\n\n  let moduleName: string;\n  const getModuleName = () => moduleName;\n\n  return <ModuleBuilder<State, RootState>>{\n    mutation<Payload>(type: string, fn: Mutation<State, Payload>) {\n      fn.toString = () => `${type}`;\n      (mutations as Mutation<State, Payload>[]).push(fn);\n      return actionCreator<Payload>(getModuleName, type);\n    },\n    action<Payload>(\n      type: string,\n      fn: ActionHandler<State, RootState, Payload>,\n    ) {\n      fn.toString = () => `${type}`;\n      (actions as ActionHandler<State, RootState, Payload>[]).push(fn);\n      return actionCreator<Payload>(getModuleName, type);\n    },\n    getter<Payload>(type: string, fn: Getter<State, RootState>) {\n      fn.toString = () => `${type}`;\n      getters.push(fn);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return (getter: any): Payload =>\n        getter[`${moduleName}/${type}`] || getter[type];\n    },\n    getModule(name = '') {\n      moduleName = name;\n      return {\n        name: moduleName,\n        namespaced: true,\n        state: initialState,\n        actions: actions.reduce((acc, action) => {\n          acc[action.toString()] = (store, { payload = null }) => {\n            action(overrideActionContext(store), payload);\n          };\n          return acc;\n        }, {}),\n        mutations: mutations.reduce((acc, mutation) => {\n          acc[mutation.toString()] = (store, { payload }) =>\n            mutation(store, payload);\n          return acc;\n        }, {}),\n        getters: getters.reduce((acc, getter) => {\n          acc[getter.toString()] = getter;\n          return acc;\n        }, {}),\n      };\n    },\n  };\n}\n","import Vue from 'vue';\nimport Vuex, { StoreOptions } from 'vuex';\nimport { Store } from 'vuex';\nimport type { ModuleBuilder } from './types';\n\ntype Options<RootState> = StoreOptions<RootState> & {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  moduleBuilders?: { [m in keyof RootState]?: ModuleBuilder<any, RootState> };\n};\n\n/**\n * create an instance of {@see Store} and build {@see ModuleBuilder} objects.\n *\n * ```ts\n * const module1 = createModule({ prop1: 1 });\n * const module2 = createModule({ prop2: 2 });\n *\n * const store = createStore({\n *   moduleBuilders: {\n *     module1,\n *     module2,\n *   }\n * })\n * ```\n *\n * @param options {@see Options} an extended {@see StoreOptions} that includes moduleBuilders Record.\n */\nexport function createStore<RootState = never>(\n  options: Options<RootState>,\n): Store<RootState> {\n  Vue.use(Vuex);\n\n  const modules: [string, ModuleBuilder<RootState>][] = Object.entries(\n    options.moduleBuilders || {},\n  );\n\n  return new Store<RootState>({\n    ...options,\n    modules: {\n      ...(options?.modules || {}),\n      ...modules.reduce((acc, [name, builder]) => {\n        const _m = builder.getModule(name);\n        acc[_m.name] = _m;\n        return acc;\n      }, {}),\n    },\n  });\n}\n"],"names":["actionCreator","moduleName","type","payload","initialState","mutations","actions","getters","getModuleName","mutation","fn","toString","push","action","getter","getModule","name","namespaced","state","reduce","acc","store","_a","_b","commit","root","overrideActionContext","options","Vue","use","Vuex","modules","Object","entries","moduleBuilders","Store","_m"],"mappings":";;;;;ulBAGMA,EAAgB,SACpBC,EACAC,GACG,OAAA,SAACC,GAAe,OACnBD,KAAMD,IAAkBA,QAAgBC,EAASA,EACjDC,qCAyBAC,GAEA,IAIIH,EAJEI,EAAwC,GACxCC,EAAsD,GACtDC,EAAsC,GAGtCC,EAAgB,WAAM,OAAAP,GAE5B,MAAwC,CACtCQ,SAAA,SAAkBP,EAAcQ,GAG9B,OAFAA,EAAGC,SAAW,WAAM,MAAA,GAAGT,GACtBG,EAAyCO,KAAKF,GACxCV,EAAuBQ,EAAeN,IAE/CW,OAAA,SACEX,EACAQ,GAIA,OAFAA,EAAGC,SAAW,WAAM,MAAA,GAAGT,GACtBI,EAAuDM,KAAKF,GACtDV,EAAuBQ,EAAeN,IAE/CY,OAAA,SAAgBZ,EAAcQ,GAI5B,OAHAA,EAAGC,SAAW,WAAM,MAAA,GAAGT,GACvBK,EAAQK,KAAKF,GAEN,SAACI,GACN,OAAAA,EAAUb,MAAcC,IAAWY,EAAOZ,KAE9Ca,mBAAUC,GAER,oBAFQA,MAED,CACLA,KAFFf,EAAae,EAGXC,YAAY,EACZC,MAAOd,EACPE,QAASA,EAAQa,QAAO,SAACC,EAAKP,GAI5B,OAHAO,EAAIP,EAAOF,YAAc,SAACU,EAAOC,OAAEC,YAAApB,aAAU,OAC3CU,EA5DZ,SACEQ,GAEA,cACKA,IACHG,OAAQ,SAACtB,GAAS,OAAAmB,EAAMG,OAAOtB,EAAM,CAAEuB,MAAM,OAuD9BC,CAAsBL,GAAQlB,IAEhCiB,IACN,IACHf,UAAWA,EAAUc,QAAO,SAACC,EAAKX,GAGhC,OAFAW,EAAIX,EAASE,YAAc,SAACU,EAAOC,OAAEnB,YACnC,OAAAM,EAASY,EAAOlB,IACXiB,IACN,IACHb,QAASA,EAAQY,QAAO,SAACC,EAAKN,GAE5B,OADAM,EAAIN,EAAOH,YAAcG,EAClBM,IACN,+BCvDTO,GAEAC,UAAIC,IAAIC,WAER,IAAMC,EAAgDC,OAAOC,QAC3DN,EAAQO,gBAAkB,IAG5B,OAAO,IAAIC,eACNR,IACHI,gBACMJ,MAAAA,SAAAA,EAASI,UAAW,IACrBA,EAAQZ,QAAO,SAACC,EAAKE,OAACN,OACjBoB,OAAarB,UAAUC,GAE7B,OADAI,EAAIgB,EAAGpB,MAAQoB,EACRhB,IACN"}